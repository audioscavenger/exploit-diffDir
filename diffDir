#!/usr/bin/env bash
########
# INIT ###########################################################################
########
thisVersion=1.0.3
typeset grepWhat RESOLV QUIET uniqNames resolvPaths rightDirContentTmp leftDir rightDir
grepWhat=
RESOLV=false
QUIET=false
uniqNames="cat"
resolvPaths="cat"
rightDirContentTmp=/tmp/${FUNCNAME}.$$.tmp

# getopts:
typeset _NOARGS _OPT OPTIND
while getopts :mdsurq _OPT 2>/dev/null
do
{
  case ${_OPT} in
    m) grepWhat="${grepWhat:+${grepWhat}}#" ;;
    d) grepWhat="${grepWhat:+${grepWhat}}~" ;;
    s) grepWhat="${grepWhat:+${grepWhat}}=" ;;
    u) uniqNames="awk '/~/ {n=split(\$2,libname,\".\");print libname[1]}'|sort|uniq" ;;  # used for libdir comparison
    r) RESOLV=true ;;
    q) QUIET=true ;;
    *) _NOARGS="${_NOARGS}${_NOARGS+, }-${OPTARG}" ;;
  esac
}
done
shift $((OPTIND - 1))
unset _OPT OPTARG OPTIND
# [ "X${_NOARGS}" != "X" ] && ERROR param "${_NOARGS}"

########
# VERIF ###########################################################################
########
if [ $# -lt 1 -o "X${_NOARGS}" != "X" ]; then
  echo2 "\
${C}${FUNCNAME} ${w}[OPTIONS] ${c}<leftDir> [rightDir:.] ${END}\n\
  -m              show only missing items \n\
  -d              show only differences \n\
  -s              show only identicals \n\
  -r              show full paths \n\
  -q              QUIET (no header/footer) \n\
"
  exit 99
fi

leftDir=$(realpath $1)
rightDir=$(realpath ${2:-$PWD})
grepWhat=${grepWhat:-=#~}

[ ! -d "${leftDir}" ] && ERROR exist_rep "${leftDir}" 0 && exit 1
[ ! -d "${rightDir}" ] && ERROR exist_rep "${rightDir}" 0 && exit 1

########
# MAIN ###########################################################################
########
command ls -lq ${rightDir}| awk 'NR>1 {if ($(NF-1) == "->") {printf "%s %s->%s\n",$5,$(NF-2),$NF} else {print $5,$NF}}' | sort -k 2 >${rightDirContentTmp}
command ls -lq ${leftDir}| awk 'NR>1 {if ($(NF-1) == "->") {printf "%s %s->%s\n",$5,$(NF-2),$NF} else {print $5,$NF}}' | sort -k 2 | join -a1 -a2 -1 2 -2 2 -o 1.2,1.1,2.1,2.2 -e 0 - ${rightDirContentTmp} |\
awk -v leftDir=${leftDir}/ -v rightDir=${rightDir}/ -v RESOLV=${RESOLV} -v QUIET=${QUIET} -v grepWhat="${grepWhat}" '
function commas(d) {
  # http://www.staff.science.uu.nl/~oostr102/docs/nawk/nawk_65.html
  d = d ""
  gsub(",","",d)
  point = index(d,".") - 1
  if (point < 0) point = length(d)
  while (point > 3) {
    point -= 3
    d = substr(d,1,point)","substr(d,point + 1)
  }
  return d
}
BEGIN {i=1;leftWidth=20;rightWidth=20;totalSizeLeft=0;totalSizeRight=0;sep="----------------------------------------------------------------"}
{
leftColor[i]="{w}";sign[i]="="
if (QUIET=="false") {space=" "} else {space=""}
if ($2==$3) {leftColor[i]="{g8}"} else {leftColor[i]="{y}";sign[i]="~"}
if ($1 ~ "->") {leftColor[i]="{c}"}
leftDirWidth=length(leftDir);rightDirWidth=length(rightDir);
leftName[i]=$1;leftSize[i]=$2;rightSize[i]=$3;rightName[i]=$4;leftDirO[i]=leftDir;rightDirO[i]=rightDir
middleColor[i]=leftColor[i]
if (leftName[i]=="0") {leftDirO[i]="";leftSize[i]="";leftName[i]="";middleColor[i]="{w}";sign[i]="#"} else {totalLeft++;totalSizeLeft+=leftSize[i]}
if (rightName[i]=="0") {rightDirO[i]="";rightSize[i]="";rightName[i]="";leftColor[i]=middleColor[i]="{w}";sign[i]="#"} else {totalRight++;totalSizeRight+=rightSize[i]}
if (length($1) > leftWidth) {leftWidth=length($1)}
if (length($4) > rightWidth) {rightWidth=length($4)}
if (leftName[i] ~ "->") {middleColor[i]="{c}"}
i++
}
END {
if (i==1) {print "identical"} else {
  if (QUIET=="false") {
    printf "%s %-"leftDirWidth+leftWidth"s %-"rightDirWidth+rightWidth"s\n","{c}",leftDir,rightDir
    printf "%s %."leftWidth"s %.14s : %.14s %."rightWidth"s\n","{c}",sep,sep,sep,sep
  }
  if (RESOLV=="true") {
    for (n=1; n<i; n++) {
      if (index(grepWhat, sign[n])) {printf "%s%s%"leftDirWidth"s%-"leftWidth"s %s%"rightDirWidth"s%-"rightWidth"s\n",leftColor[n],space,leftDirO[n],leftName[n],middleColor[n],rightDirO[n],rightName[n]}}
    } else {
    for (n=1; n<i; n++) {
      if (index(grepWhat, sign[n])) {printf "%s%s%"leftWidth"s %14s %s%s %-14s %-"rightWidth"s\n",leftColor[n],space,leftName[n],commas(leftSize[n]),middleColor[n],sign[n],commas(rightSize[n]),rightName[n]}}
  }
  if (QUIET=="false") {
    printf "%s %."leftWidth"s %.14s : %.14s %."rightWidth"s\n","{w}",sep,sep,sep,sep
    printf "%s %"leftWidth"s %14s : %-14s %-"rightWidth"s{END}\n","{w}","total : "totalLeft,commas(totalSizeLeft),commas(totalSizeRight),totalRight
  }
}
}' |\
${COLORIZE} ${LOWS} |\
eval ${uniqNames}

rm -f ${rightDirContentTmp}
exit 0
